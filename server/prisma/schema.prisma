// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(CLIENT)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  jobs           Job[]
  sftpCredentials SftpCredential[]
  auditLogs      AuditLog[]
}

model SftpCredential {
  id        String   @id @default(cuid())
  userId    String
  username  String   @unique
  password  String   // Hashed
  active    Boolean  @default(true)
  lastUsed  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id           String    @id @default(cuid())
  userId       String
  month        String
  year         Int
  campaignName String
  status       JobStatus @default(DRAFT)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  approvedAt   DateTime?
  mailedAt     DateTime?

  // Counts and pricing
  mailCount    Int?
  ratePerPiece Float?
  totalCost    Float?
  taxAmount    Float?

  // Proofing
  proofNotes String?

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  files       File[]
  invoices    Invoice[]
  proofEvents ProofEvent[]
}

model File {
  id           String    @id @default(cuid())
  jobId        String
  filename     String
  originalName String
  fileType     FileType
  filePath     String
  fileSize     Int
  mimeType     String
  uploadedVia  UploadMethod @default(WEB)
  uploadedAt   DateTime  @default(now())

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

model Invoice {
  id          String   @id @default(cuid())
  jobId       String
  invoiceNum  String   @unique
  amount      Float
  taxAmount   Float
  totalAmount Float
  status      InvoiceStatus @default(DRAFT)
  pdfPath     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  paidAt      DateTime?

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model ProofEvent {
  id        String   @id @default(cuid())
  jobId     String
  action    ProofAction
  notes     String?
  createdAt DateTime @default(now())

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  resource  String
  details   String?
  ipAddress String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

// Enums
enum Role {
  ADMIN
  STAFF
  CLIENT
}

enum JobStatus {
  DRAFT
  ASSETS_UPLOADED
  PROOFING
  APPROVED
  PRINTING
  INVOICED
  COMPLETE
}

enum FileType {
  BUCKSLIP_1
  BUCKSLIP_2
  BUCKSLIP_3
  LETTER_REPLY
  OUTER_ENVELOPE
  MAIL_LIST
  PROOF_SAMPLE
}

enum UploadMethod {
  WEB
  SFTP
  API
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  CANCELLED
}

enum ProofAction {
  SUBMITTED
  APPROVED
  REJECTED
  NOTES_ADDED
}
